version: "3.9"

services:
  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5444:5432"
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=12345
      - POSTGRES_DB=db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"   # AMQP protocol
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass 12345 --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - app-network

  keycloak-db:
    image: postgres:15
    container_name: keycloak-db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: 12345
    ports:
      - "5433:5432"
    volumes:
      - postgres2_data:/var/lib/postgresql/data
    restart: always
    networks:
      - app-network

  keycloak:
    image: quay.io/keycloak/keycloak:21.1.2
    container_name: keycloak
    environment:
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: 12345
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: 12345
      # Упрощенная конфигурация для разработки:
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8090
      KC_HTTP_ENABLED: true
    ports:
      - "8090:8080"
    depends_on:
      - keycloak-db
    networks:
      - app-network
    command: [ "start-dev", "--http-enabled=true" ]

  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    networks:
      - app-network

  logstash:
      image: logstash:8.11.0
      container_name: logstash
      volumes:
        - ./logstash/pipeline:/usr/share/logstash/pipeline
        - ./logs:/var/log/application:ro
      environment:
        - LS_JAVA_OPTS=-Xms256m -Xmx256m
      depends_on:
        - elasticsearch
      restart: unless-stopped
      networks:
        - app-network

  kibana:
      image: kibana:8.11.0
      container_name: kibana
      ports:
        - "5601:5601"
      environment:
        - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      depends_on:
        - elasticsearch
      restart: unless-stopped
      networks:
        - app-network

volumes:  #сохраняем данные между перезапусками
  postgres_data:
  rabbitmq_data:
  redis_data:
  elastic_data:
  postgres2_data:

networks: #позволяем контейнерам общаться между собой по именам
  app-network:
    driver: bridge
